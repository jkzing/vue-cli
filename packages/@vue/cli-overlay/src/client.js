/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict'

// This alternative WebpackDevServer combines the functionality of:
// https://github.com/webpack/webpack-dev-server/blob/webpack-1/client/index.js
// https://github.com/webpack/webpack/blob/webpack-1/hot/dev-server.js

// It only supports their simplest configuration (hot updates on same server).
// It makes some opinionated choices on top, like adding a syntax error overlay
// that looks similar to our console output. The error overlay is inspired by:
// https://github.com/glenjamin/webpack-hot-middleware

var SockJS = require('sockjs-client')
var url = require('url')
var stripAnsi = require('strip-ansi')
var ErrorOverlay = require('react-error-overlay')
var chalk = require('chalk')

var modules = {}

;(function () {
  /**
   * Copyright (c) 2015-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  'use strict'

  // WARNING: this code is untranspiled and is used in browser too.
  // Please make sure any changes are in ES5 or contribute a Babel compile step.

  // Some custom utilities to prettify Webpack output.
  // This is quite hacky and hopefully won't be needed when Webpack fixes this.
  // https://github.com/webpack/webpack/issues/2878

  var friendlySyntaxErrorLabel = 'Syntax error:'

  function isLikelyASyntaxError (message) {
    return message.indexOf(friendlySyntaxErrorLabel) !== -1
  }

  // Cleans up webpack error messages.
  // eslint-disable-next-line no-unused-vars
  function formatMessage (message, isError) {
    var lines = message.split('\n')

    if (lines.length > 2 && lines[1] === '') {
      // Remove extra newline.
      lines.splice(1, 1)
    }

    // Remove webpack-specific loader notation from filename.
    // Before:
    // ./~/css-loader!./~/postcss-loader!./src/App.css
    // After:
    // ./src/App.css
    if (lines[0].lastIndexOf('!') !== -1) {
      lines[0] = lines[0].substr(lines[0].lastIndexOf('!') + 1)
    }

    // Remove unnecessary stack added by `thread-loader`
    var threadLoaderIndex = -1
    lines.forEach(function (line, index) {
      if (threadLoaderIndex !== -1) {
        return
      }
      if (line.indexOf('from thread-loader (worker') !== -1) {
        threadLoaderIndex = index
      }
    })

    if (threadLoaderIndex !== -1) {
      lines = lines.slice(0, threadLoaderIndex)
    }

    lines = lines.filter(function (line) {
      // Webpack adds a list of entry points to warning messages:
      //  @ ./src/index.js
      //  @ multi react-scripts/~/react-dev-utils/webpackHotDevClient.js ...
      // It is misleading (and unrelated to the warnings) so we clean it up.
      // It is only useful for syntax errors but we have beautiful frames for them.
      return line.indexOf(' @ ') !== 0
    })

    // line #0 is filename
    // line #1 is the main error message
    if (!lines[0] || !lines[1]) {
      return lines.join('\n')
    }

    // Cleans up verbose "module not found" messages for files and packages.
    if (lines[1].indexOf('Module not found: ') === 0) {
      lines = [
        lines[0],
        // Clean up message because "Module not found: " is descriptive enough.
        lines[1]
          .replace("Cannot resolve 'file' or 'directory' ", '')
          .replace('Cannot resolve module ', '')
          .replace('Error: ', '')
          .replace('[CaseSensitivePathsPlugin] ', '')
      ]
    }

    // Cleans up syntax error messages.
    if (lines[1].indexOf('Module build failed: ') === 0) {
      lines[1] = lines[1].replace(
        'Module build failed: SyntaxError:',
        friendlySyntaxErrorLabel
      )
    }

    // Clean up export errors.
    // TODO: we should really send a PR to Webpack for this.
    var exportError = /\s*(.+?)\s*(")?export '(.+?)' was not found in '(.+?)'/
    if (lines[1].match(exportError)) {
      lines[1] = lines[1].replace(
        exportError,
        "$1 '$4' does not contain an export named '$3'."
      )
    }

    lines[0] = chalk.inverse(lines[0])

    // Reassemble the message.
    message = lines.join('\n')
    // Internal stacks are generally useless so we strip them... with the
    // exception of stacks containing `webpack:` because they're normally
    // from user code generated by WebPack. For more information see
    // https://github.com/facebook/create-react-app/pull/1050
    message = message.replace(
      /^\s*at\s((?!webpack:).)*:\d+:\d+[\s)]*(\n|$)/gm,
      ''
    ) // at ... ...:x:y

    return message.trim()
  }

  function formatWebpackMessages (json) {
    var formattedErrors = json.errors.map(function (message) {
      return formatMessage(message, true)
    })
    var formattedWarnings = json.warnings.map(function (message) {
      return formatMessage(message, false)
    })
    var result = {
      errors: formattedErrors,
      warnings: formattedWarnings
    }
    if (result.errors.some(isLikelyASyntaxError)) {
      // If there are any syntax errors, show just them.
      // This prevents a confusing ESLint parsing error
      // preceding a much more useful Babel syntax error.
      result.errors = result.errors.filter(isLikelyASyntaxError)
    }
    return result
  }

  modules.formatWebpackMessages = formatWebpackMessages
})()

ErrorOverlay.setEditorHandler(function editorHandler (errorLocation) {
  // Keep this sync with errorOverlayMiddleware.js
  const editorEndpoint = url.format({
    pathname: '/__open-in-editor',
    query: {
      file: [errorLocation.fileName, errorLocation.lineNumber, errorLocation.colNumber].join(':')
    }
  })
  window.fetch(editorEndpoint)
})

// We need to keep track of if there has been a runtime error.
// Essentially, we cannot guarantee application state was not corrupted by the
// runtime error. To prevent confusing behavior, we forcibly reload the entire
// application. This is handled below when we are notified of a compile (code
// change).
// See https://github.com/facebook/create-react-app/issues/3096
var hadRuntimeError = false
ErrorOverlay.startReportingRuntimeErrors({
  onError: function () {
    hadRuntimeError = true
  },
  filename: '/static/js/bundle.js'
})

if (module.hot && typeof module.hot.dispose === 'function') {
  module.hot.dispose(function () {
    // TODO: why do we need this?
    ErrorOverlay.stopReportingRuntimeErrors()
  })
}

// Connect to WebpackDevServer via a socket.
var connection = new SockJS(
  url.format({
    protocol: window.location.protocol,
    hostname: window.location.hostname,
    port: window.location.port,
    // Hardcoded in WebpackDevServer
    pathname: '/sockjs-node'
  })
)

// Unlike WebpackDevServer client, we won't try to reconnect
// to avoid spamming the console. Disconnect usually happens
// when developer stops the server.
connection.onclose = function () {
  if (typeof console !== 'undefined' && typeof console.info === 'function') {
    console.info(
      'The development server has disconnected.\nRefresh the page if necessary.'
    )
  }
}

// Remember some state related to hot module replacement.
var isFirstCompilation = true
var mostRecentCompilationHash = null
var hasCompileErrors = false

function clearOutdatedErrors () {
  // Clean up outdated compile errors, if any.
  if (typeof console !== 'undefined' && typeof console.clear === 'function') {
    if (hasCompileErrors) {
      console.clear()
    }
  }
}

// Successful compilation.
function handleSuccess () {
  clearOutdatedErrors()

  var isHotUpdate = !isFirstCompilation
  isFirstCompilation = false
  hasCompileErrors = false

  // Attempt to apply hot updates or reload.
  if (isHotUpdate) {
    tryApplyUpdates(function onHotUpdateSuccess () {
      // Only dismiss it when we're sure it's a hot update.
      // Otherwise it would flicker right before the reload.
      ErrorOverlay.dismissBuildError()
    })
  }
}

// Compilation with warnings (e.g. ESLint).
function handleWarnings (warnings) {
  clearOutdatedErrors()

  var isHotUpdate = !isFirstCompilation
  isFirstCompilation = false
  hasCompileErrors = false

  function printWarnings () {
    // Print warnings to the console.
    var formatted = modules.formatWebpackMessages({
      warnings: warnings,
      errors: []
    })

    if (typeof console !== 'undefined' && typeof console.warn === 'function') {
      for (var i = 0; i < formatted.warnings.length; i++) {
        if (i === 5) {
          console.warn(
            'There were more warnings in other files.\n' +
              'You can find a complete log in the terminal.'
          )
          break
        }
        console.warn(stripAnsi(formatted.warnings[i]))
      }
    }
  }

  // Attempt to apply hot updates or reload.
  if (isHotUpdate) {
    tryApplyUpdates(function onSuccessfulHotUpdate () {
      // Only print warnings if we aren't refreshing the page.
      // Otherwise they'll disappear right away anyway.
      printWarnings()
      // Only dismiss it when we're sure it's a hot update.
      // Otherwise it would flicker right before the reload.
      ErrorOverlay.dismissBuildError()
    })
  } else {
    // Print initial warnings immediately.
    printWarnings()
  }
}

// Compilation with errors (e.g. syntax error or missing modules).
function handleErrors (errors) {
  clearOutdatedErrors()

  isFirstCompilation = false
  hasCompileErrors = true

  // "Massage" webpack messages.
  var formatted = modules.formatWebpackMessages({
    errors: errors,
    warnings: []
  })

  // Only show the first error.
  ErrorOverlay.reportBuildError(formatted.errors[0])

  // Also log them to the console.
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    for (var i = 0; i < formatted.errors.length; i++) {
      console.error(stripAnsi(formatted.errors[i]))
    }
  }

  // Do not attempt to reload now.
  // We will reload on next success instead.
}

// There is a newer version of the code available.
function handleAvailableHash (hash) {
  // Update last known compilation hash.
  mostRecentCompilationHash = hash
}

// Handle messages from the server.
connection.onmessage = function (e) {
  var message = JSON.parse(e.data)
  switch (message.type) {
  case 'hash':
    handleAvailableHash(message.data)
    break
  case 'still-ok':
  case 'ok':
    handleSuccess()
    break
  case 'content-changed':
    // Triggered when a file from `contentBase` changed.
    window.location.reload()
    break
  case 'warnings':
    handleWarnings(message.data)
    break
  case 'errors':
    handleErrors(message.data)
    break
  default:
    // Do nothing.
  }
}

// Is there a newer version of this code available?
function isUpdateAvailable () {
  /* globals __webpack_hash__ */
  // __webpack_hash__ is the hash of the current compilation.
  // It's a global variable injected by Webpack.
  // eslint-disable-next-line
  return mostRecentCompilationHash !== __webpack_hash__
}

// Webpack disallows updates in other states.
function canApplyUpdates () {
  return module.hot.status() === 'idle'
}

// Attempt to update code on the fly, fall back to a hard reload.
function tryApplyUpdates (onHotUpdateSuccess) {
  if (!module.hot) {
    // HotModuleReplacementPlugin is not in Webpack configuration.
    window.location.reload()
    return
  }

  if (!isUpdateAvailable() || !canApplyUpdates()) {
    return
  }

  function handleApplyUpdates (err, updatedModules) {
    if (err || !updatedModules || hadRuntimeError) {
      window.location.reload()
      return
    }

    if (typeof onHotUpdateSuccess === 'function') {
      // Maybe we want to do something.
      onHotUpdateSuccess()
    }

    if (isUpdateAvailable()) {
      // While we were updating, there was a new update! Do it again.
      tryApplyUpdates()
    }
  }

  // https://webpack.github.io/docs/hot-module-replacement.html#check
  var result = module.hot.check(/* autoApply */ true, handleApplyUpdates)

  // // Webpack 2 returns a Promise instead of invoking a callback
  if (result && result.then) {
    result.then(
      function (updatedModules) {
        handleApplyUpdates(null, updatedModules)
      },
      function (err) {
        handleApplyUpdates(err, null)
      }
    )
  }
}
